I"∂<p>Trade Offs!</p>

<p>Today I was on a mission to reduce coupling in my Java TTT. I felt as thought
the User Interface was doing more than it should have to, and possibly had some
feature envy from the Board class since it was validating input against the
available cells.</p>

<p>I wanted to move the board validation into the Game class, so that the
reasons for the change in the UserInterface were reduced.</p>

<p>By moving the validation out of the UserInterface, it then meant that the
Players could not mark the board directly, so that responsibility also
moved to the Game class. The flow for board marking was then:</p>

<ul>
  <li>Enter gameplay loop in Game</li>
  <li>Game prompts the current player to make a move</li>
  <li>Current player generates a move</li>
  <li>That generated move is then passed back to the game, for the board to be
marked.</li>
</ul>

<p>Here is where the trade off arrives. My players all implement the interface
Player. However, since the players are no longer responsible for marking the
board directly they no longer need the board to be passed to them, except that
some of them do‚Ä¶</p>

<h4 id="human-class">Human Class</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">choosePosition</span><span class="o">(</span><span class="nc">UserInterface</span> <span class="n">ui</span><span class="o">,</span> <span class="nc">Board</span> <span class="n">board</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">ui</span><span class="o">.</span><span class="na">getNumber</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
<h4 id="dumbcomputer-class">DumbComputer Class</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">choosePosition</span><span class="o">(</span><span class="nc">UserInterface</span> <span class="n">userInterface</span><span class="o">,</span> <span class="nc">Board</span> <span class="n">board</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">generateMove</span><span class="o">(</span><span class="n">board</span><span class="o">.</span><span class="na">availableMoves</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<p>The situation here is that the Human class only really needs the UI passed to
it, and the DumbComputer only really needs the board. However, in order to
abide by LSP, I must keep the method parameters the same.</p>

<p>There are plenty of ways to think about this problem, but I cannot find one
solution that beats all the others. I could for example pass the UI into the
Human player‚Äôs constructor. Or the board into the DumbComputers constructor.
The deliberation there is which one of those instances will be changing more
often.</p>

<p>I could also consider that in reality, a Human player needs to ‚Äúsee‚Äù the board
in order to make a move, and so passing the board to the Human isn‚Äôt that
problematic anyway.</p>

<p>For now I think I‚Äôll leave it, and then approach it again after some more
features have been added, perhaps something else that‚Äôs added will affect how
I approach this problem.</p>

:ET