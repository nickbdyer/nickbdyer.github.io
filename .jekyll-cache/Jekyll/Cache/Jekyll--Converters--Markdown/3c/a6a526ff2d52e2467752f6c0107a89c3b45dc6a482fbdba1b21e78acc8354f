I"æs<h1 id="data-structures-and-algorithms">Data Structures and Algorithms</h1>

<p>It has been a week since my last post. Last week was the most stressful so far
at 8th Light, the Coursera course I am currently taking took up a huge amount
of my time, and unfortuantely I badly estimated it in my IPM. In doing so,
some tasks slipped, and this blog was one of them. I‚Äôve been trying to think
about how to avoid the same situation in the future. I recognise that this blog
is a learning mechanism for myself first, and information for others second. So
by neglecting it, I am actually hindering my own development. Even if it means
that my data structures progress suffers.</p>

<p>Making time to reflect is key, and last week I was so focused on getting things
done, I didn‚Äôt look back once. I am sure this contributed to the stress I felt.
Additionally, I have been asked to make this blog more ‚Äúin depth‚Äù and move away
from a daily model, so I probably would have learnt more than usual.</p>

<p>So, in the past week, what have I learnt? In total I have covered a huge number
of different topics:</p>

<ul>
  <li>Arrays</li>
  <li>Single Linked Lists</li>
  <li>Double Linked Lists</li>
  <li>Stacks</li>
  <li>Queues</li>
  <li>Trees</li>
  <li>Tree Traversal</li>
  <li>Dynamic Arrays</li>
  <li>Amortised Analysis</li>
  <li>Priority Queues</li>
  <li>Binary Trees</li>
  <li>Heap Sorting</li>
  <li>Disjoint Sets</li>
  <li>Big O Notation</li>
</ul>

<p>I wouldn‚Äôt say that I am an expert in any of these areas yet, but I have at
least got a basic understanding and awareness of the different concepts.</p>

<p>The course has a number of different assignments at the end of each weekly
topic. All of which require the implementation of an algorithm to solve
a specific problem. There have been two types of assessment so far, create an
algorithm from scratch, or refine an existing algorithm in order to make it
more efficient. The automated test suites that run the submissions operate with
different timing constraints for different languages. So far I have been doing
everything with Java.</p>

<p>In this blog post I‚Äôm going to address the one of the first assignments I had, how
I tackled it, and what ended up being the final solution. This particular
assignment, unlike some of the others, didn‚Äôt come with a ‚Äúreal world‚Äù problem
to address. It was directly an implementation query, ‚Äúhow to find the height of
a tree (with an arbitrary number of branches)‚Äù.</p>

<p>For those that are unfamiliar, a tree data structure consists of a collection
of nodes, with a root node from which all other nodes are connected via
branches. In fact, trees are typically depicted more like the roots of a tree
rather than the above ground section, since the root is at the top, and the
branches extend downwards. There is a special type of tree called a binary tree
that has specifically no more than two branches coming from any node. These
trees are particular useful for storing data, since they can be used for very
efficient searching. The height of a tree is calculated as the number of nodes
from the root to the lowest leaf node (node without any branches).</p>

<blockquote>
  <p>Side Note: there are actually two definitions of tree height/depth, those that
count the number of nodes in a tree from highest to lowest, and those that
count the branches between them. Hence some define a tree with only a root
node as having a height of one, others would say zero. For the purposes of
this assignment, a tree with only a root node will have a height of one!</p>
</blockquote>

<p><img src="/images/tree_data_structure.gif" alt="Tree" title="Tree Data Structure" class="center-image" /></p>

<p>The starter code for the assignment gave an iterative solution to the problem.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">computeHeight</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// Replace this code with a faster implementation</span>
    <span class="kt">int</span> <span class="n">maxHeight</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">vertex</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">vertex</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">vertex</span><span class="o">++)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">height</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">vertex</span><span class="o">;</span> <span class="n">i</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">parent</span><span class="o">[</span><span class="n">i</span><span class="o">])</span>
            <span class="n">height</span><span class="o">++;</span>
        <span class="n">maxHeight</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxHeight</span><span class="o">,</span> <span class="n">height</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">maxHeight</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>For clarity, <code class="highlighter-rouge">n</code> is an integer representing the number of nodes in the tree.
And <code class="highlighter-rouge">parent[]</code> is an int array representing the tree, where the value at each
index of the array corresponds to the index of that node‚Äôs parent.</p>

<p>I found getting my head around the parent array difficult, it seemed to be
designed in the wrong way. It added to my confusion as a whole around this
solution so I disregarded it at first. I recognised it at least as iterative, and
so came to the presumptuous conclusion that the solution they were looking for
must be recursive, because recursive algorithms are faster‚Ä¶</p>

<p>In order to create a recursive solution to the problem I knew that the solution
needed to allow a root node to be passed so I could recursively ask for the
heights of it‚Äôs children. In order to do so, I needed to create a Node class
that could represent the tree structure in a better way than the array.
I needed a way to link to children not parents of nodes. I iterated through the
existing parent array and created a tree structure using the <code class="highlighter-rouge">Node</code> class. And
then used the recursive <code class="highlighter-rouge">newComputeHeight</code> method to calculate the tree height
based on passing in the root node.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">class</span> <span class="nc">Node</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">data</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Node</span> <span class="n">parent</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Node</span><span class="o">&gt;</span> <span class="n">children</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Node</span><span class="o">(</span><span class="kt">int</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">children</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Node</span><span class="o">&gt;();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addChild</span><span class="o">(</span><span class="nc">Node</span> <span class="n">child</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">children</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">child</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">countChildren</span><span class="o">()</span> <span class="o">{</span>
       <span class="k">return</span> <span class="n">children</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">TreeHeight</span> <span class="o">{</span>

    <span class="o">...</span>

    <span class="kt">int</span> <span class="nf">newComputeHeight</span><span class="o">(</span><span class="nc">Node</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">countChildren</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">childHeights</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Node</span> <span class="n">child</span> <span class="o">:</span> <span class="n">root</span><span class="o">.</span><span class="na">children</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">childHeights</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">newComputeHeight</span><span class="o">(</span><span class="n">child</span><span class="o">));</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="mi">1</span> <span class="o">+</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">childHeights</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>This solution worked! Ish.</p>

<p>In producing this solution and submitting it online, I discovered that the
algorithm would be tested against a tree with 100000 nodes. I discovered this
because my algorithm was failing due to a stack overflow error! My first stack
overflow error!</p>

<p>At this point in the story, Uku arrived to the rescue. He explained to me that
recursive algorithms are almost never more efficient than iterative ones,
generally they are slower. However, they are typically more elegant. So my
assumption at the start head lead me down the wrong path. Although ultimately
it was a good lesson learnt.</p>

<p>Armed with new information on the efficiency of different types of algorithm,
I turned back to the given solution from the starter code.  After investigating
it a bit further (after a long time hitting my head against a wall)
I discovered what their algorithm was doing, and what it was doing
inefficiently.</p>

<p>The line <code class="highlighter-rouge">for (int i = vertex; i != -1; i = parent[i])</code> confused me for
a while. What this line is doing in conjunction with <code class="highlighter-rouge">for</code> loop above is
starting at a given node, follow the path up the tree via parents until you
reach the root node (denoted by a value of -1). Each time adding one to the
height calculation. I allowed myself to get distracted during this assignment
for various external reasons, and didn‚Äôt take the time to try and understand
this algorithm. However, when I did, I realised that it was duplicating a huge
amount of work. On travelling up the tree from a given node, it would pass
a large number of nodes on its way to the root, but would do nothing with the
information on their heights. So it was recalculating the height for nodes that
it had essentially already calculated! I knew it was inefficient, but I was
amazed when I saw the figures to back it up:</p>

<blockquote>
  <p>Note: I changed the word vertex to node, because it made reading the
algorithm a little easier for me.</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">computeHeight</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// Replace this code with a faster implementation</span>
    <span class="kt">int</span> <span class="n">maxHeight</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="kt">long</span> <span class="n">numOperations</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">node</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">node</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">node</span><span class="o">++)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">height</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">node</span><span class="o">;</span> <span class="n">i</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">parent</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
            <span class="n">height</span><span class="o">++;</span>
            <span class="n">numOperations</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="n">maxHeight</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxHeight</span><span class="o">,</span> <span class="n">height</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">numOperations</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">maxHeight</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<p><code class="highlighter-rouge">numOperations: 2,500,100,000</code></p>

<p><code class="highlighter-rouge">running time: 22s 341ms</code></p>

<blockquote>
  <p>Notice that I had to make the <code class="highlighter-rouge">numOperations</code> a <code class="highlighter-rouge">long</code> type!</p>
</blockquote>

<p>I implemented a simple solution using a new array <code class="highlighter-rouge">int[] heights = new int[n]</code>
that stored a height for values that it passed on the way up to the root during
other calculations.  There was still some duplication in the algorithm, but far
less than before.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">computeHeight</span><span class="o">()</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">maxHeight</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">numOperations</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">node</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">node</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">node</span><span class="o">++)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">height</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">node</span><span class="o">;</span> <span class="n">i</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">parent</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">heights</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">height</span> <span class="o">=</span> <span class="n">height</span> <span class="o">+</span> <span class="n">heights</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="n">height</span><span class="o">++;</span>
            <span class="n">numOperations</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="n">heights</span><span class="o">[</span><span class="n">node</span><span class="o">]</span> <span class="o">=</span> <span class="n">height</span><span class="o">;</span>
        <span class="n">maxHeight</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxHeight</span><span class="o">,</span> <span class="n">height</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">numOperations</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">maxHeight</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">numOperations: 1,050,284</code></p>

<p><code class="highlighter-rouge">running time: 243ms</code></p>

<p>This solution actually turned out to be the fastest solution for this problem,
but Uku rightly pointed out that using memoization to solve this assignment,
probably wasn‚Äôt its purpose.</p>

<p>So, onto a more technically appropriate solution to the problem. Tree
traversal. I‚Äôm showing the full <code class="highlighter-rouge">TreeHeight</code> class in this solution, so
a couple of notes on the new items. The <code class="highlighter-rouge">read</code> method has always existed, and
just takes the string argument from terminal and uses it to define the number
of nodes, and parent array as described before. I piggybacked off that method
to implement my tree structure in order that I could traverse it.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Node</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Node</span><span class="o">&gt;</span> <span class="n">children</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Node</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">children</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Node</span><span class="o">&gt;();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addChild</span><span class="o">(</span><span class="nc">Node</span> <span class="n">child</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">children</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">child</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>


<span class="kd">class</span> <span class="nc">TreeHeight</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">parent</span><span class="o">[];</span>
    <span class="nc">Node</span> <span class="n">root</span><span class="o">;</span>

    <span class="nc">Node</span> <span class="nf">getRoot</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">root</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">read</span><span class="o">(</span><span class="nc">InputStreamReader</span> <span class="n">input</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">FastScanner</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FastScanner</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="n">parent</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">parent</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">createTree</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">createTree</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Node</span><span class="o">&gt;</span> <span class="n">nodeList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Node</span><span class="o">&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">Node</span> <span class="n">node</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">();</span>
            <span class="n">nodeList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">parent</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">root</span> <span class="o">=</span> <span class="n">nodeList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">nodeList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">parent</span><span class="o">[</span><span class="n">i</span><span class="o">]).</span><span class="na">addChild</span><span class="o">(</span><span class="n">nodeList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kt">int</span> <span class="nf">computeHeight</span><span class="o">(</span><span class="nc">Node</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">height</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Node</span><span class="o">&gt;</span> <span class="n">todo</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="na">children</span><span class="o">;</span>

        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">nodeCount</span> <span class="o">=</span> <span class="n">todo</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>

            <span class="k">if</span> <span class="o">(</span><span class="n">nodeCount</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
               <span class="k">return</span> <span class="n">height</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">height</span><span class="o">++;</span>
            <span class="o">}</span>

            <span class="k">while</span><span class="o">(</span><span class="n">nodeCount</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">Node</span> <span class="n">thisNode</span> <span class="o">=</span> <span class="n">todo</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>

                <span class="n">todo</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">thisNode</span><span class="o">.</span><span class="na">children</span><span class="o">);</span>
                <span class="n">nodeCount</span><span class="o">--;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>This version of the <code class="highlighter-rouge">computeHeight</code> method uses Breadth First traversal to travel
down the tree from the root node, passing all the children on each level of the
tree. Whenever all the children from a particular level are added to the queue
the height total is incremented. This is really an iterative version of the
recursive algorithm from before, so it is quite nice in that sense to see how
the different algorithms stack up.</p>

<p>The algorithm above works nicely on any type of tree, since it doesn‚Äôt care how
many children there are on each node. It is slightly slower than the memoized
version of the solution, but is preferable since it is a standard algorithm
that can be reused. The delay is mostly due to the creation of the underlying
tree data structure used for the iteration. The starter code algorithm is tied
heavily to the way data is presented to the programme from the terminal, so is
not a preferable solution in that sense.</p>

:ET