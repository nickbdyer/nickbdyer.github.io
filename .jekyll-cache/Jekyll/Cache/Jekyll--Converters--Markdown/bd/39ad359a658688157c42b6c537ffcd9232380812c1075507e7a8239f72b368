I"q,<p>Refactoring more.</p>

<p>Today, I turned this:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kt">int</span> <span class="nf">getValidPosition</span><span class="o">(</span><span class="nc">Board</span> <span class="n">board</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">output</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Please choose a number between 1-9"</span><span class="o">);</span>
        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">number</span> <span class="o">=</span> <span class="n">getNumber</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">isPositionInBounds</span><span class="o">(</span><span class="n">number</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">isPositionMarkable</span><span class="o">(</span><span class="n">number</span><span class="o">,</span> <span class="n">board</span><span class="o">))</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="n">number</span><span class="o">;</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="n">output</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"That cell is already marked, try again"</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">output</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"That is not a valid position"</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isPositionInBounds</span><span class="o">(</span><span class="kt">int</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">number</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">number</span> <span class="o">&lt;=</span> <span class="mi">9</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isPositionMarkable</span><span class="o">(</span><span class="kt">int</span> <span class="n">number</span><span class="o">,</span> <span class="nc">Board</span> <span class="n">board</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">board</span><span class="o">.</span><span class="na">isCellEmpty</span><span class="o">(</span><span class="n">number</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">getNumber</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">number</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">(!</span><span class="n">input</span><span class="o">.</span><span class="na">hasNextInt</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">output</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"That is not a valid input"</span><span class="o">);</span>
            <span class="n">input</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">number</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">number</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>
<p>Into this:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kt">int</span> <span class="nf">getValidPosition</span><span class="o">(</span><span class="nc">Board</span> <span class="n">board</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">output</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Please choose a number between 1-9"</span><span class="o">);</span>
        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">position</span> <span class="o">=</span> <span class="n">getNumber</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">outOfBounds</span><span class="o">(</span><span class="n">position</span><span class="o">)</span> <span class="o">||</span> <span class="n">alreadyMarked</span><span class="o">(</span><span class="n">board</span><span class="o">,</span> <span class="n">position</span><span class="o">))</span>
                <span class="k">continue</span><span class="o">;</span>
            <span class="k">return</span> <span class="n">position</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">outOfBounds</span><span class="o">(</span><span class="kt">int</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">isPositionInBounds</span><span class="o">(</span><span class="n">number</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">output</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"That is not a valid position"</span><span class="o">);</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">alreadyMarked</span><span class="o">(</span><span class="nc">Board</span> <span class="n">board</span><span class="o">,</span> <span class="kt">int</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">isPositionMarkable</span><span class="o">(</span><span class="n">number</span><span class="o">,</span> <span class="n">board</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">output</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"That cell is already marked, try again"</span><span class="o">);</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isPositionInBounds</span><span class="o">(</span><span class="kt">int</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">number</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">number</span> <span class="o">&lt;=</span> <span class="mi">9</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isPositionMarkable</span><span class="o">(</span><span class="kt">int</span> <span class="n">number</span><span class="o">,</span> <span class="nc">Board</span> <span class="n">board</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">board</span><span class="o">.</span><span class="na">isCellEmpty</span><span class="o">(</span><span class="n">number</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">getNumber</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">while</span> <span class="o">(!</span><span class="n">input</span><span class="o">.</span><span class="na">hasNextInt</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">output</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"That is not a valid input"</span><span class="o">);</span>
            <span class="n">input</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>I am not convinced that I have got it nailed yet. Since I think that the
method names, although clear, seem to have duplication in them “outOfBounds” and
“isPositionInBounds”. I haven’t yet decided if the solution is to rename the
methods to make them more suitable, one is obviously more focused on alerting
the user that their choice was a poor one, the other is really determining
whether that is the case. Alternatively, maybe there is a sensible way to
combine them into one method, without making the “getValidPosition” method any
larger than it needs to be.</p>

<p>More broadly I think I have fallen into the trap of primitive obsession
elsewhere in my code, since my main data structure for the Board Class is
a <code class="highlighter-rouge">char[]</code>. I’ll need to look further into this code smell to understand
whether I have fallen into that trap, or if not, how to avoid it.</p>

<p>There seems to be an overwhelming amount to learn at the moment, and I need to
stop getting frustrated when I can’t work something out. I think I have an idea
for a blog post at some point in the future, working title <em>“How to suceed as an
Apprentice at 8th Light”</em>. Perhaps theres benefit associated in coming at the
apprentiship without a preconceived idea about how it will be, what to expect
etc. However, I think there may be some bonus in knowing what worked for other
people. I’ll think on it, and see how I might structure it for later.</p>

:ET